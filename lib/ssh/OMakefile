# MPL generation
#
GEN_FILES[] =
    ssh_server_automaton.ml
    ssh_server_channel.ml
    ssh_statecalls.ml

OCamlGeneratedFiles($(GEN_FILES))

OCAMLINCLUDES += $(SPL_DIR)
OCAMLINCLUDES += $(MPL_DIR)
OCAMLINCLUDES += $(LIB_DIR)/ounix
OCAMLINCLUDES += $(DIST_DIR)/cryptokit

MPL_FILES = ssh_message
MPL_FLAGS = -s
MPLGenerated($(MPL_FILES))

# SPL generation
#
SPLC=$(ROOT)/tools/spl/splc
SPL_FILES = ssh_server_automaton ssh_server_channel
SPL_SOURCES = $(addsuffix .spl,$(SPL_FILES))

$(addsuffix .ml, $(SPL_FILES)) ssh_statecalls.ml: $(SPLC) $(SPL_SOURCES)
	$(SPLC) -t ocaml -s ssh_statecalls -hdir $(SPL_DIR) -d false $(SPL_SOURCES)

# Main library compilation
#

FILES[] =
    ssh_statecalls
    ssh_server_automaton
    ssh_server_channel
    ssh_message
    ssh_classify
    ssh_utils
    ssh_tty
    ssh_algorithms
    ssh_version
    ssh_pool
    ssh_keys
    ssh_kex
    ssh_channel
    ssh_env_t
    ssh_transport
    ssh_userauth
    ssh_config
    ssh_env
    ssh_server

SSH_OCAML = $(OCamlLibrary ssh, $(FILES))

$(SSH_OCAML): $(ROOT)/dist/cryptokit/cryptokit.cmi $(ROOT)/tools/mpl/mpl_stdlib.cmi $(LIB_DIR)/ounix/ounix.cmxa $(ROOT)/tools/spl/spl_stdlib.cmi


.DEFAULT: $(SSH_OCAML)

clean:
	$(CLEAN) $(GEN_FILES) dllssh_stubs.so
